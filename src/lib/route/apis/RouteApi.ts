/* tslint:disable */
/* eslint-disable */
/**
 * Live Course Control API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchRouteRequest,
  ProblemDetailResponse,
  RoutePointResponse,
  RouteResponse,
} from '../models/index';
import {
    PatchRouteRequestFromJSON,
    PatchRouteRequestToJSON,
    ProblemDetailResponseFromJSON,
    ProblemDetailResponseToJSON,
    RoutePointResponseFromJSON,
    RoutePointResponseToJSON,
    RouteResponseFromJSON,
    RouteResponseToJSON,
} from '../models/index';

export interface CreateRouteRequest {
    body: Blob;
}

export interface DeleteRouteByRouteIdRequest {
    routeId: string;
}

export interface GetRoutePointByRouteIdRequest {
    routeId: string;
}

export interface GetRoutePointCenterByRouteIdRequest {
    routeId: string;
}

export interface PatchRouteByRouteIdRequest {
    routeId: string;
    patchRouteRequest: PatchRouteRequest;
}

/**
 * 
 */
export class RouteApi extends runtime.BaseAPI {

    /**
     * Create a route
     */
    async createRouteRaw(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling createRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/gpx+xml';

        const response = await this.request({
            path: `/route`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a route
     */
    async createRoute(requestParameters: CreateRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createRouteRaw(requestParameters, initOverrides);
    }

    /**
     * delete route by route id
     */
    async deleteRouteByRouteIdRaw(requestParameters: DeleteRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling deleteRouteByRouteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/route/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete route by route id
     */
    async deleteRouteByRouteId(requestParameters: DeleteRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRouteByRouteIdRaw(requestParameters, initOverrides);
    }

    /**
     * get route points by route id
     */
    async getRoutePointByRouteIdRaw(requestParameters: GetRoutePointByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoutePointResponse>>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getRoutePointByRouteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/route-point/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoutePointResponseFromJSON));
    }

    /**
     * get route points by route id
     */
    async getRoutePointByRouteId(requestParameters: GetRoutePointByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoutePointResponse>> {
        const response = await this.getRoutePointByRouteIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get route point center by route id
     */
    async getRoutePointCenterByRouteIdRaw(requestParameters: GetRoutePointCenterByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutePointResponse>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling getRoutePointCenterByRouteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/route-point/center/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutePointResponseFromJSON(jsonValue));
    }

    /**
     * get route point center by route id
     */
    async getRoutePointCenterByRouteId(requestParameters: GetRoutePointCenterByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutePointResponse> {
        const response = await this.getRoutePointCenterByRouteIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get all routes
     */
    async getRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RouteResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/route`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RouteResponseFromJSON));
    }

    /**
     * get all routes
     */
    async getRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RouteResponse>> {
        const response = await this.getRoutesRaw(initOverrides);
        return await response.value();
    }

    /**
     * patch route by route id
     */
    async patchRouteByRouteIdRaw(requestParameters: PatchRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling patchRouteByRouteId().'
            );
        }

        if (requestParameters['patchRouteRequest'] == null) {
            throw new runtime.RequiredError(
                'patchRouteRequest',
                'Required parameter "patchRouteRequest" was null or undefined when calling patchRouteByRouteId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/route/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchRouteRequestToJSON(requestParameters['patchRouteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * patch route by route id
     */
    async patchRouteByRouteId(requestParameters: PatchRouteByRouteIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchRouteByRouteIdRaw(requestParameters, initOverrides);
    }

}
