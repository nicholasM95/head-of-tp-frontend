/* tslint:disable */
/* eslint-disable */
/**
 * Live Course Control API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RouteResponse
 */
export interface RouteResponse {
    /**
     * 
     * @type {string}
     * @memberof RouteResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RouteResponse
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    elevationGain: number;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    estimatedAverageSpeed: number;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    distanceInMeters: number;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    durationInMinutes: number;
    /**
     * 
     * @type {Date}
     * @memberof RouteResponse
     */
    estimatedStartTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteResponse
     */
    estimatedEndTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    pauseInMinutes: number;
    /**
     * 
     * @type {Date}
     * @memberof RouteResponse
     */
    createDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteResponse
     */
    lastModifiedDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof RouteResponse
     */
    startTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RouteResponse
     */
    averageSpeed: number;
}

/**
 * Check if a given object implements the RouteResponse interface.
 */
export function instanceOfRouteResponse(value: object): value is RouteResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('elevationGain' in value) || value['elevationGain'] === undefined) return false;
    if (!('estimatedAverageSpeed' in value) || value['estimatedAverageSpeed'] === undefined) return false;
    if (!('distanceInMeters' in value) || value['distanceInMeters'] === undefined) return false;
    if (!('durationInMinutes' in value) || value['durationInMinutes'] === undefined) return false;
    if (!('estimatedStartTime' in value) || value['estimatedStartTime'] === undefined) return false;
    if (!('estimatedEndTime' in value) || value['estimatedEndTime'] === undefined) return false;
    if (!('pauseInMinutes' in value) || value['pauseInMinutes'] === undefined) return false;
    if (!('createDate' in value) || value['createDate'] === undefined) return false;
    if (!('lastModifiedDate' in value) || value['lastModifiedDate'] === undefined) return false;
    if (!('startTime' in value) || value['startTime'] === undefined) return false;
    if (!('averageSpeed' in value) || value['averageSpeed'] === undefined) return false;
    return true;
}

export function RouteResponseFromJSON(json: any): RouteResponse {
    return RouteResponseFromJSONTyped(json, false);
}

export function RouteResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'elevationGain': json['elevationGain'],
        'estimatedAverageSpeed': json['estimatedAverageSpeed'],
        'distanceInMeters': json['distanceInMeters'],
        'durationInMinutes': json['durationInMinutes'],
        'estimatedStartTime': (new Date(json['estimatedStartTime'])),
        'estimatedEndTime': (new Date(json['estimatedEndTime'])),
        'pauseInMinutes': json['pauseInMinutes'],
        'createDate': (new Date(json['createDate'])),
        'lastModifiedDate': (new Date(json['lastModifiedDate'])),
        'startTime': (new Date(json['startTime'])),
        'averageSpeed': json['averageSpeed'],
    };
}

export function RouteResponseToJSON(json: any): RouteResponse {
    return RouteResponseToJSONTyped(json, false);
}

export function RouteResponseToJSONTyped(value?: RouteResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'elevationGain': value['elevationGain'],
        'estimatedAverageSpeed': value['estimatedAverageSpeed'],
        'distanceInMeters': value['distanceInMeters'],
        'durationInMinutes': value['durationInMinutes'],
        'estimatedStartTime': ((value['estimatedStartTime']).toISOString()),
        'estimatedEndTime': ((value['estimatedEndTime']).toISOString()),
        'pauseInMinutes': value['pauseInMinutes'],
        'createDate': ((value['createDate']).toISOString()),
        'lastModifiedDate': ((value['lastModifiedDate']).toISOString()),
        'startTime': ((value['startTime']).toISOString()),
        'averageSpeed': value['averageSpeed'],
    };
}

