/* tslint:disable */
/* eslint-disable */
/**
 * Head Of TP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateParticipantRequest,
  ParticipantResponse,
  PatchParticipantRequest,
  ProblemDetailResponse,
} from '../models/index';
import {
    CreateParticipantRequestFromJSON,
    CreateParticipantRequestToJSON,
    ParticipantResponseFromJSON,
    ParticipantResponseToJSON,
    PatchParticipantRequestFromJSON,
    PatchParticipantRequestToJSON,
    ProblemDetailResponseFromJSON,
    ProblemDetailResponseToJSON,
} from '../models/index';

export interface CreateParticipantOperationRequest {
    createParticipantRequest: CreateParticipantRequest;
}

export interface DeleteParticipantByIdRequest {
    id: string;
}

export interface PatchParticipantByIdRequest {
    id: string;
    patchParticipantRequest: PatchParticipantRequest;
}

/**
 * 
 */
export class ParticipantApi extends runtime.BaseAPI {

    /**
     * Create a participant
     */
    async createParticipantRaw(requestParameters: CreateParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createParticipantRequest'] == null) {
            throw new runtime.RequiredError(
                'createParticipantRequest',
                'Required parameter "createParticipantRequest" was null or undefined when calling createParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/participant`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateParticipantRequestToJSON(requestParameters['createParticipantRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a participant
     */
    async createParticipant(requestParameters: CreateParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createParticipantRaw(requestParameters, initOverrides);
    }

    /**
     * delete participant by id
     */
    async deleteParticipantByIdRaw(requestParameters: DeleteParticipantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteParticipantById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete participant by id
     */
    async deleteParticipantById(requestParameters: DeleteParticipantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteParticipantByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Find all participants
     */
    async findAllParticipantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ParticipantResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/participant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ParticipantResponseFromJSON));
    }

    /**
     * Find all participants
     */
    async findAllParticipants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ParticipantResponse>> {
        const response = await this.findAllParticipantsRaw(initOverrides);
        return await response.value();
    }

    /**
     * patch participant by id
     */
    async patchParticipantByIdRaw(requestParameters: PatchParticipantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchParticipantById().'
            );
        }

        if (requestParameters['patchParticipantRequest'] == null) {
            throw new runtime.RequiredError(
                'patchParticipantRequest',
                'Required parameter "patchParticipantRequest" was null or undefined when calling patchParticipantById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/participant/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchParticipantRequestToJSON(requestParameters['patchParticipantRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * patch participant by id
     */
    async patchParticipantById(requestParameters: PatchParticipantByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchParticipantByIdRaw(requestParameters, initOverrides);
    }

}
