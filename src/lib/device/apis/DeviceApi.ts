/* tslint:disable */
/* eslint-disable */
/**
 * Head Of TP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDeviceLocationRequest,
  DeviceResponse,
  ProblemDetailResponse,
} from '../models/index';
import {
    CreateDeviceLocationRequestFromJSON,
    CreateDeviceLocationRequestToJSON,
    DeviceResponseFromJSON,
    DeviceResponseToJSON,
    ProblemDetailResponseFromJSON,
    ProblemDetailResponseToJSON,
} from '../models/index';

export interface CreateDeviceLocationOperationRequest {
    createDeviceLocationRequest: CreateDeviceLocationRequest;
}

export interface CreateDeviceLocationOldRequest {
    id?: string;
    timestamp?: string;
    lat?: string;
    lon?: string;
    speed?: string;
    bearing?: string;
    altitude?: string;
    accuracy?: string;
    batt?: string;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     * Create a device location
     */
    async createDeviceLocationRaw(requestParameters: CreateDeviceLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createDeviceLocationRequest'] == null) {
            throw new runtime.RequiredError(
                'createDeviceLocationRequest',
                'Required parameter "createDeviceLocationRequest" was null or undefined when calling createDeviceLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeviceLocationRequestToJSON(requestParameters['createDeviceLocationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a device location
     */
    async createDeviceLocation(requestParameters: CreateDeviceLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createDeviceLocationRaw(requestParameters, initOverrides);
    }

    /**
     * Create a device location
     */
    async createDeviceLocationOldRaw(requestParameters: CreateDeviceLocationOldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['timestamp'] != null) {
            queryParameters['timestamp'] = requestParameters['timestamp'];
        }

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lon'] != null) {
            queryParameters['lon'] = requestParameters['lon'];
        }

        if (requestParameters['speed'] != null) {
            queryParameters['speed'] = requestParameters['speed'];
        }

        if (requestParameters['bearing'] != null) {
            queryParameters['bearing'] = requestParameters['bearing'];
        }

        if (requestParameters['altitude'] != null) {
            queryParameters['altitude'] = requestParameters['altitude'];
        }

        if (requestParameters['accuracy'] != null) {
            queryParameters['accuracy'] = requestParameters['accuracy'];
        }

        if (requestParameters['batt'] != null) {
            queryParameters['batt'] = requestParameters['batt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device/old`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a device location
     */
    async createDeviceLocationOld(requestParameters: CreateDeviceLocationOldRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createDeviceLocationOldRaw(requestParameters, initOverrides);
    }

    /**
     * Find all devices
     */
    async findAllDevicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeviceResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceResponseFromJSON));
    }

    /**
     * Find all devices
     */
    async findAllDevices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeviceResponse>> {
        const response = await this.findAllDevicesRaw(initOverrides);
        return await response.value();
    }

}
