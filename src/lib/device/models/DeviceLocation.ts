/* tslint:disable */
/* eslint-disable */
/**
 * Head Of TP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceLocationCoords } from './DeviceLocationCoords';
import {
    DeviceLocationCoordsFromJSON,
    DeviceLocationCoordsFromJSONTyped,
    DeviceLocationCoordsToJSON,
    DeviceLocationCoordsToJSONTyped,
} from './DeviceLocationCoords';
import type { DeviceLocationBattery } from './DeviceLocationBattery';
import {
    DeviceLocationBatteryFromJSON,
    DeviceLocationBatteryFromJSONTyped,
    DeviceLocationBatteryToJSON,
    DeviceLocationBatteryToJSONTyped,
} from './DeviceLocationBattery';

/**
 * 
 * @export
 * @interface DeviceLocation
 */
export interface DeviceLocation {
    /**
     * 
     * @type {string}
     * @memberof DeviceLocation
     */
    timestamp: string;
    /**
     * 
     * @type {DeviceLocationCoords}
     * @memberof DeviceLocation
     */
    coords: DeviceLocationCoords;
    /**
     * 
     * @type {boolean}
     * @memberof DeviceLocation
     */
    isMoving: boolean;
    /**
     * 
     * @type {number}
     * @memberof DeviceLocation
     */
    odometer: number;
    /**
     * 
     * @type {DeviceLocationBattery}
     * @memberof DeviceLocation
     */
    battery: DeviceLocationBattery;
}

/**
 * Check if a given object implements the DeviceLocation interface.
 */
export function instanceOfDeviceLocation(value: object): value is DeviceLocation {
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('coords' in value) || value['coords'] === undefined) return false;
    if (!('isMoving' in value) || value['isMoving'] === undefined) return false;
    if (!('odometer' in value) || value['odometer'] === undefined) return false;
    if (!('battery' in value) || value['battery'] === undefined) return false;
    return true;
}

export function DeviceLocationFromJSON(json: any): DeviceLocation {
    return DeviceLocationFromJSONTyped(json, false);
}

export function DeviceLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceLocation {
    if (json == null) {
        return json;
    }
    return {
        
        'timestamp': json['timestamp'],
        'coords': DeviceLocationCoordsFromJSON(json['coords']),
        'isMoving': json['is_moving'],
        'odometer': json['odometer'],
        'battery': DeviceLocationBatteryFromJSON(json['battery']),
    };
}

export function DeviceLocationToJSON(json: any): DeviceLocation {
    return DeviceLocationToJSONTyped(json, false);
}

export function DeviceLocationToJSONTyped(value?: DeviceLocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'timestamp': value['timestamp'],
        'coords': DeviceLocationCoordsToJSON(value['coords']),
        'is_moving': value['isMoving'],
        'odometer': value['odometer'],
        'battery': DeviceLocationBatteryToJSON(value['battery']),
    };
}

