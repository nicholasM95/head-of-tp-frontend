/* tslint:disable */
/* eslint-disable */
/**
 * Head Of TP API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeviceLocation } from './DeviceLocation';
import {
    DeviceLocationFromJSON,
    DeviceLocationFromJSONTyped,
    DeviceLocationToJSON,
    DeviceLocationToJSONTyped,
} from './DeviceLocation';

/**
 * 
 * @export
 * @interface CreateDeviceLocationRequest
 */
export interface CreateDeviceLocationRequest {
    /**
     * 
     * @type {DeviceLocation}
     * @memberof CreateDeviceLocationRequest
     */
    location: DeviceLocation;
    /**
     * 
     * @type {string}
     * @memberof CreateDeviceLocationRequest
     */
    deviceId: string;
}

/**
 * Check if a given object implements the CreateDeviceLocationRequest interface.
 */
export function instanceOfCreateDeviceLocationRequest(value: object): value is CreateDeviceLocationRequest {
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('deviceId' in value) || value['deviceId'] === undefined) return false;
    return true;
}

export function CreateDeviceLocationRequestFromJSON(json: any): CreateDeviceLocationRequest {
    return CreateDeviceLocationRequestFromJSONTyped(json, false);
}

export function CreateDeviceLocationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDeviceLocationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'location': DeviceLocationFromJSON(json['location']),
        'deviceId': json['device_id'],
    };
}

export function CreateDeviceLocationRequestToJSON(json: any): CreateDeviceLocationRequest {
    return CreateDeviceLocationRequestToJSONTyped(json, false);
}

export function CreateDeviceLocationRequestToJSONTyped(value?: CreateDeviceLocationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'location': DeviceLocationToJSON(value['location']),
        'device_id': value['deviceId'],
    };
}

